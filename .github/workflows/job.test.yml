name: CI

on:
  push:
    branches:
      - master
      - 2.x
  pull_request:
    branches:
      - master
      - 2.x
  workflow_dispatch:

defaults:
  run:
    shell: bash -l {0}

env:
  # Increase this value to reset all caches
  CACHE_EPOCH: 0

  JLPM_CMD: jlpm --ignore-optional --prefer-offline --frozen-lockfile

  PYTHONUNBUFFERED: 1
  ATEST_RETRIES: 3
  PIP_DISABLE_PIP_VERSION_CHECK: 1

  # TODO: replace once mambaforge "just works" with setup-miniconda
  MAMBAFORGE_URL: https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge

jobs:
  lint:
    name: jstest/lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        nodejs: ['>=14,<15.0.0a0']
        lab: ['>=3.0.0,<4.0.0a0']
    steps:
      - uses: actions/checkout@v2

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-lint-${{ hashFiles('requirements/github-actions.yml', 'requirements/lint.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-lint-

      - name: Set up Python and mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.MAMBAFORGE_URL }}-Linux-x86_64.sh
          condarc-file: .github/.condarc

      - name: Install base conda dependencies
        run: mamba env update -n test --file requirements/github-actions.yml

      - name: Install linting dependencies
        run: mamba env update -n test --file requirements/lint.yml

      - name: Check integrity of package versions
        run: python scripts/integrity.py

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-lint-${{ hashFiles('yarn.lock', 'requirements/github-actions.yml') }}

      - name: Cache yarn packages
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: Install npm dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: ${{ env.JLPM_CMD }}

      - name: Build frontend
        run: jlpm build

      - name: Run frontend unit tests
        run: jlpm test

      - name: Lint backend
        run: python scripts/lint.py

      - name: Lint frontend
        run: jlpm lint:check

  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        nodejs: ['>=14,<15.0.0a0']
        lab: ['>=3.0.0,<4.0.0a0']
    steps:
      - uses: actions/checkout@v2

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-build-${{ hashFiles('requirements/github-actions.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-build-

      - name: Set up Python and mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.MAMBAFORGE_URL }}-Linux-x86_64.sh
          condarc-file: .github/.condarc

      - name: Install minimal build deps
        shell: bash -l {0}
        run: mamba install -n test -c conda-forge setuptools wheel 'jupyterlab${{ matrix.lab }}' 'nodejs${{ matrix.nodejs }}'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-build-${{ hashFiles('yarn.lock', 'requirements/github-actions.yml') }}

      - name: Cache yarn packages
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: install npm dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: ${{ env.JLPM_CMD }}

      - name: Build frontend
        run: |
          jlpm build
          jlpm bundle

      - name: Build python distributions
        run: |
          set -eux
          cp README.md python_packages/jupyterlab_lsp
          cd python_packages/jupyter_lsp
          python setup.py sdist bdist_wheel
          cd ../jupyterlab_lsp
          python setup.py sdist bdist_wheel

      - name: Collect distributions
        run: |
          set -eux
          mkdir dist
          cp python_packages/*/dist/* packages/*/*.tgz dist/
          cd dist
          sha256sum * | tee SHA256SUMS

      - name: Publish builds
        uses: actions/upload-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist

  acceptance:
    runs-on: ${{ matrix.os }}-latest
    name: atest ${{ matrix.os }} py${{ matrix.python }}
    needs: [build]
    strategy:
      # TODO: maybe turn back on
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python: [3.6, 3.7, 3.8]
        lab: ['>=3.0.0,<4.0.0a0']
        include:
          # if using 3.6, use an old node
          - python: 3.6
            # Node 10 end-of-life: April 2021
            nodejs: '>=10,<11.0.0.a0'
          # if using 3.7, use newer node, etc...
          - python: 3.7
            # Node 12 end-of-life: April 2022
            nodejs: '>=12,<13.0.0.a0'
          - python: 3.8
            # Node 14 end-of-life: April 2023
            nodejs: '>=14,<15.0.0.a0'
          # TODO: remove when mambaforge just works on setup-miniconda
          - os: ubuntu
            mambaforge: Linux-x86_64.sh
          - os: macos
            mambaforge: MacOSX-x86_64.sh
          - os: windows
            mambaforge: Windows-x86_64.exe

    steps:
      - uses: actions/checkout@v2

      - uses: julia-actions/setup-julia@v1

      - name: Install Julia language server
        run: julia -e 'using Pkg; Pkg.add("LanguageServer")'

      - name: Set JupyterLab and Node versions
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["requirements/github-actions.yml"]'
        env:
          lab: '${{ matrix.lab }}'
          nodejs: '${{ matrix.nodejs }}'

      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-atest-${{ hashFiles('requirements/github-actions.yml') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-${{ matrix.os }}-${{ matrix.python }}-atest-

      - name: Set up Python and mamba
        uses: conda-incubator/setup-miniconda@v2
        with:
          installer-url: ${{ env.MAMBAFORGE_URL }}-${{ matrix.mambaforge }}
          python-version: ${{ matrix.python }}
          condarc-file: .github/.condarc

      - name: Describe conda
        run: |
          conda info
          conda config --show-sources
          conda config --show

      - name: Install conda dependencies (unix)
        if: ${{ matrix.os != 'windows' }}
        run: mamba env update -n test --file requirements/github-actions.yml

      - name: Install conda dependencies (windows)
        if: ${{ matrix.os == 'windows' }}
        shell: cmd /C call {0}
        run: mamba env update -n test --file requirements/github-actions.yml

      - name: List all packages
        run: conda list

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ env.CACHE_EPOCH }}-${{ runner.os }}-node-test-${{ hashFiles('yarn.lock', 'requirements/github-actions.yml') }}

      - name: Cache yarn packages
        id: cache-yarn-packages
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: .yarn-packages
          key: ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ env.CACHE_EPOCH }}-yarn-${{ runner.os }}-
            ${{ env.CACHE_EPOCH }}-yarn-

      - name: install npm dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: ${{ env.JLPM_CMD }}

      - uses: actions/download-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist

      - name: Install python packages
        run: python -m pip install --find-links=dist --no-index --ignore-installed --no-deps jupyter_lsp jupyterlab_lsp

      - name: Pip check
        run: python -m pip check

      - name: List server extensions
        run: |
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "jupyter_lsp.*enabled" -

      - name: List notebook server extensions
        run: |
          jupyter serverextension list
          jupyter serverextension list 2>&1 | grep -ie "jupyter_lsp.*enabled" -

      - name: List frontend extensions
        run: jupyter labextension list

      - name: Run python tests
        run: python scripts/utest.py

      - name: Run browser tests
        run: python scripts/atest.py --exclude expect:fail

      - name: Publish browser test output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ job.status }} Robot ${{ matrix.os }} Python ${{ matrix.python }} ${{ github.run_number }}
          path: ./atest/output
        if: always()

  smoke:
    name: smoke ${{ matrix.os }} py${{ matrix.python }}
    runs-on: ${{ matrix.os }}-latest
    needs: [build, lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python: ['3.6', '3.9', 'pypy3']
        exclude:
          - os: windows
            python: pypy3
        include:
          - python: '3.6'
            dist: 'jupyter*lsp*.tar.gz'
          - python: 'pypy3'
            dist: 'jupyter*lsp*.tar.gz'
          - python: '3.9'
            dist: 'jupyter*lsp*.whl'
          - os: windows
            py_cmd: python
          - os: macos
            py_cmd: python3
          - os: ubuntu
            py_cmd: python
    steps:
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: 'x64'
      - uses: actions/download-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist
      - name: Install the prerequisites
        run: ${{ matrix.py_cmd }} -m pip install pip wheel
      - name: Install the package
        run: cd dist && ${{ matrix.py_cmd }} -m pip install -vv ${{ matrix.dist }}
      - name: Validate environment
        run: |
          set -eux
          ${{ matrix.py_cmd }} -m pip freeze
          ${{ matrix.py_cmd }} -m pip check
      - name: Validate the install
        run: |
          set -eux
          jupyter labextension list
          jupyter server extension list
          jupyter labextension list 2>&1 | grep -ie "jupyterlab-lsp.*enabled.*ok" -
          jupyter server extension list 2>&1 | grep -ie "jupyter_lsp.*enabled" -

  source:
    name: smoke source install ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python: ['3.6']
        nodejs: ['14']
        lab: ['>=3.0.0,<4.0.0a0']
    steps:
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: 'x64'
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{matrix.nodejs}}
      - uses: actions/download-artifact@v2
        with:
          name: jupyterlab-lsp dist ${{ github.run_number }}
          path: ./dist
      - name: Install the prerequisites
        run: python -m pip install pip wheel
      - name: Install JupyterLab
        shell: bash -l {0}
        run: python -m pip install 'jupyterlab${{ matrix.lab }}'
      - name: Install the server package
        run: cd dist && python -m pip install -vv jupyter_lsp*.whl
      - name: install the source extension
        run: cd dist && jupyter labextension install krassowski-jupyterlab-lsp-*.tgz --log-level DEBUG
      - name: Validate the install
        run: |
          set -eux
          jupyter labextension list
          jupyter server extension list
          jupyter labextension list 2>&1 | grep -ie "jupyterlab-lsp.*enabled.*ok" -
          jupyter server extension list 2>&1 | grep -ie "jupyter_lsp.*enabled" -
